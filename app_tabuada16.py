# -*- coding: utf-8 -*-
"""app_tabuada16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LIG7iA50IvuFF7iz99_C_1lEdkjwXhVl
"""

import streamlit as st
import random
from gtts import gTTS
import os
import time
import pandas as pd
import plotly.express as px

# --- Configurações Iniciais ---
TOTAL_PERGUNTAS = 21
NUM_COLUMNS = 3

# 1. O PRIMEIRO COMANDO STREAMLIT DEVE SER SEMPRE st.set_page_config()
st.set_page_config(page_title="Maratona das Tabuadas Divertida!",
                   layout="wide",
                   initial_sidebar_state="collapsed",
                   page_icon="✨")

# --- Funções Auxiliares ---

def falar(texto):
    """
    Função para converter texto em voz.
    ATENÇÃO: Não está sendo usada neste modelo de 30 perguntas simultâneas.
    """
    try:
        tts = gTTS(text=texto, lang='pt', slow=False)
        audio_file = "temp_audio.mp3"
        tts.save(audio_file)
        st.audio(audio_file, format='audio/mp3', start_time=0, loop=False)
        time.sleep(max(1.5, len(texto) * 0.08))
        if os.path.exists(audio_file):
            os.remove(audio_file)
    except Exception as e:
        print(f"Erro detalhado ao gerar/reproduzir áudio: {e}")
        st.warning("Não foi possível reproduzir o áudio. Verifique sua conexão com a internet ou as permissões do navegador.")


def gerar_lista_perguntas():
    """Gera uma lista de 21 perguntas de tabuada aleatórias e únicas."""
    perguntas = []
    perguntas_unicas = set()

    while len(perguntas) < TOTAL_PERGUNTAS:
        num1 = random.randint(2, 9)
        num2 = random.randint(1, 10)

        pergunta_par = (num1, num2)

        if pergunta_par not in perguntas_unicas:
            perguntas_unicas.add(pergunta_par)
            pergunta_texto = f"{num1} x {num2} = ?"
            resposta_correta = num1 * num2
            perguntas.append({'id': len(perguntas), 'pergunta': pergunta_texto, 'resposta_correta': resposta_correta})
    return perguntas

def inicializar_estado():
    """Inicializa as variáveis de estado da sessão do Streamlit."""
    if 'iniciado' not in st.session_state:
        st.session_state.iniciado = False
    if 'perguntas' not in st.session_state:
        st.session_state.perguntas = []
    if 'respostas_usuario' not in st.session_state:
        st.session_state.respostas_usuario = {}
    if 'mostrar_resultados_finais' not in st.session_state:
        st.session_state.mostrar_resultados_finais = False
    if 'acertos' not in st.session_state:
        st.session_state.acertos = 0
    if 'erros' not in st.session_state:
        st.session_state.erros = 0
    if 'last_key' not in st.session_state:
        st.session_state.last_key = time.time()

def iniciar_maratona():
    """Reinicia a maratona de perguntas."""
    # --- MENSAGEM DE DEBUG TEMPORÁRIA ---
    st.info("DEBUG: Função 'iniciar_maratona()' foi chamada. O aplicativo deve reiniciar.")
    # --- FIM DA MENSAGEM DE DEBUG ---

    st.session_state.iniciado = True
    st.session_state.perguntas = gerar_lista_perguntas()
    st.session_state.respostas_usuario = {p['id']: None for p in st.session_state.perguntas}
    st.session_state.mostrar_resultados_finais = False # Esconde os resultados finais
    st.session_state.acertos = 0
    st.session_state.erros = 0
    st.session_state.last_key = time.time() # Garante novas chaves para os inputs
    st.rerun() # Força o Streamlit a reexecutar o script desde o início

def verificar_todas_respostas():
    """Verifica todas as respostas do usuário e calcula o percentual."""
    acertos = 0
    erros = 0
    for pergunta_obj in st.session_state.perguntas:
        pergunta_id = pergunta_obj['id']
        resposta_correta = pergunta_obj['resposta_correta']

        input_widget_key = f"resposta_input_{pergunta_id}_{st.session_state.last_key}"
        resposta_do_campo_str = st.session_state.get(input_widget_key, '')

        if not resposta_do_campo_str or not resposta_do_campo_str.strip():
            erros += 1
            continue

        try:
            resposta_digitada = int(resposta_do_campo_str)
        except ValueError:
            erros += 1
            continue

        if resposta_digitada == resposta_correta:
            acertos += 1
        else:
            erros += 1

    st.session_state.acertos = acertos
    st.session_state.erros = erros
    st.session_state.mostrar_resultados_finais = True
    st.session_state.iniciado = False # Volta para a tela inicial/resultados
    st.rerun()

# --- Funções de Mensagens Motivacionais ---
def exibir_mensagem_motivacional(percentual):
    st.write("") # Espaçamento
    if percentual == 100:
        st.balloons() # Efeito de balões!
        st.markdown("<h3 style='text-align: center; color: #28A745;'>🎉 Uau! Que demais! 100% de acerto! Você é um gênio da tabuada! Parabéns! 🎉</h3>", unsafe_allow_html=True)
    elif percentual >= 80:
        st.success("🌟 Incrível! Você está mandando muito bem nas tabuadas! Continue assim!")
    elif percentual >= 50:
        st.info("👍 Muito bom! Você já acertou bastante. Um pouco mais de prática e você chega lá!")
    else:
        st.warning("💪 Não desanime! Cada erro é uma chance de aprender. Continue praticando, você vai conseguir!")
    st.write("") # Espaçamento


# --- Estilo CSS Personalizado (para imagem de fundo) ---

# URL RAW da imagem do GitHub
BACKGROUND_IMAGE_RAW_URL = "https://raw.githubusercontent.com/marciaestudar/projeto_simulador/main/imagem_criancas2.jpeg"

page_bg_img_css = f'''
<style>
/* Estilo para o container principal do Streamlit */
[data-testid="stAppViewContainer"] {{
    background-image: url("{BACKGROUND_IMAGE_RAW_URL}") !important;
    background-size: cover !important;
    background-position: center !important;
    background-repeat: no-repeat !important;
    background-attachment: fixed !important;
}}

/* Garantir que o container principal do conteúdo seja transparente */
[data-testid="stAppViewContainer"] > .main {{
    background-color: rgba(255, 255, 255, 0) !important; /* Totalmente transparente */
}}

/* Garantir que o bloco de conteúdo principal também seja transparente */
[data-testid="stVerticalBlock"] {{
    background-color: rgba(255, 255, 255, 0) !important; /* Totalmente transparente */
}}

/* Estilos para o texto: cor, negrito, sem sombra */
/* Geral para todos os textos, exceto os títulos principais que têm suas cores específicas */
h3, p, span, div, .stTextInput > div > div > input {{
    color: #fcfafa !important; /* Branco */
    font-weight: bold !important; /* Texto em negrito */
}}

/* Ajustar cor do texto para títulos principais sem sombra, mantendo negrito */
h1 {{
    color: #2ba30a !important; /* Verde */
    font-weight: bold !important;
}}
h2 {{
    color: #030942 !important; /* Azul escuro */
    font-weight: bold !important;
}}

/* Ajuste de cor do input de texto para contraste */
.stTextInput > div > div > input {{
    background-color: rgba(255, 255, 255, 0.85) !important; /* Fundo semi-transparente para o input */
    color: #9e0303 !important; /* Cor do texto no input (preto) */
    border-radius: 5px !important; /* Bordas arredondadas para o input */
    padding: 8px 12px !important; /* Espaçamento interno */
}}
</style>
'''
st.markdown(page_bg_img_css, unsafe_allow_html=True)


# --- Layout do Streamlit ---

# Título principal com cores vibrantes
st.markdown("<h1 style='text-align: center;'> 🌟 Maratona das Tabuadas Divertida! 🌟</h1>", unsafe_allow_html=True)
st.markdown("<h2 style='text-align: center;'>Vamos aprender e brincar muito!</h2>", unsafe_allow_html=True)

inicializar_estado()

if not st.session_state.iniciado:
    # Frases uma embaixo da outra, com cores e tamanho ajustados
    st.markdown("<p style='font-size: 20px;'><b>Prepare-se para exercitar suas tabuadas de 2 a 9!</b></p>", unsafe_allow_html=True)
    st.markdown(f"<p style='font-size: 20px;'><b>Você terá {TOTAL_PERGUNTAS} perguntas aleatórias e únicas para resolver de uma vez.</b></p>", unsafe_allow_html=True)
    st.markdown("<p style='font-size: 20px;'><b>Ao final, poderá verificar seu percentual de acertos.</b></p>", unsafe_allow_html=True)

    st.write("")
    if st.button("🚀 Iniciar Maratona Agora!", key="btn_iniciar_tela_inicial", help="Começar o desafio de tabuadas"):
        iniciar_maratona()

    if st.session_state.mostrar_resultados_finais:
        st.divider()
        st.markdown("<h2 style='text-align: center; color: #FFD700;'>🎉 Resultados da Última Maratona 🎉</h2>", unsafe_allow_html=True)
        st.markdown(f"<p style='font-size: 20px;'>Acertos: <b>{st.session_state.acertos}</b></p>", unsafe_allow_html=True)
        st.markdown(f"<p style='font-size: 20px;'>Erros: <b>{st.session_state.erros}</b></p>", unsafe_allow_html=True)

        percentual = (st.session_state.acertos / TOTAL_PERGUNTAS) * 100 if TOTAL_PERGUNTAS > 0 else 0
        st.markdown(f"<p style='font-size: 20px;'>Percentual de Acertos: <b>{percentual:.2f}%</b></p>", unsafe_allow_html=True)

        data = {'Categoria': ['Acertos', 'Erros'],
                'Quantidade': [st.session_state.acertos, st.session_state.erros]}
        df = pd.DataFrame(data)

        fig = px.pie(df, values='Quantidade', names='Categoria',
                     title='Desempenho Geral',
                     color_discrete_sequence=['#4CAF50', '#F44336'])
        fig.update_traces(textposition='inside', textinfo='percent+label')
        st.plotly_chart(fig, use_container_width=True)

        # --- CHAMADA PARA MENSAGENS MOTIVACIONAIS ---
        exibir_mensagem_motivacional(percentual)

        col_res1, col_res2 = st.columns(2)
        with col_res1:
            if st.button("🔄 Reiniciar Maratona", key="btn_reiniciar_apos_finalizar", help="Começar um novo desafio"):
                iniciar_maratona() # Chama a função que reinicia o jogo
        with col_res2:
            st.info("Para finalizar o aplicativo, basta fechar esta aba do navegador.")

    st.divider()
    # Nome da autora no mesmo tamanho das frases
    st.markdown("<p style='text-align: center; font-size: 20px;'><b>Criação: Márcia Romanato</b></p>", unsafe_allow_html=True)

else: # Jogo em andamento (perguntas)
    st.markdown("<h3 style='color: #f20a1d;'>Responda todas as perguntas abaixo:</h3>", unsafe_allow_html=True)
    st.markdown("<p style='font-size: 20px;'><b>Atenção:</b> Não deixe campos em branco e digite apenas números. Digitar algo diferente será contado como erro.</p>", unsafe_allow_html=True)

    st.divider()

    cols = st.columns(NUM_COLUMNS)

    for i, pergunta_obj in enumerate(st.session_state.perguntas):
        col_index = i % NUM_COLUMNS
        with cols[col_index]:
            st.markdown(f"<p style='font-size: 20px;'><b>{pergunta_obj['pergunta']}</b></p>", unsafe_allow_html=True)

            input_widget_key = f"resposta_input_{pergunta_obj['id']}_{st.session_state.last_key}"

            initial_value = st.session_state.get(input_widget_key, '')
            if initial_value is None:
                initial_value = ''

            st.text_input(
                "Sua resposta:",
                key=input_widget_key,
                value=initial_value,
                max_chars=3
            )
            st.markdown("---")

    st.markdown("---")
    st.write("")
    if st.button("✅ Verificar Minhas Respostas", key="btn_verificar_respostas", help="Enviar todas as respostas para correção"):
        verificar_todas_respostas()

    st.divider()
    # Nome da autora no mesmo tamanho das frases
    st.markdown("<p style='text-align: center;'><b>Autora: Márcia Romanato</b></p>", unsafe_allow_html=True)