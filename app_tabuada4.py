# -*- coding: utf-8 -*-
"""app_tabuada4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DH_yQ3lbK9Rcave7sqMB1SVr9Xp2QPkf
"""

import streamlit as st
import random
from gtts import gTTS
import os
import time

# --- Configurações Iniciais ---
TOTAL_PERGUNTAS = 60 # Agora são 60 perguntas
NUM_COLUMNS = 3      # Exibir as perguntas em 3 colunas

# --- Funções Auxiliares ---

def falar(texto):
    """
    Função para converter texto em voz.
    ATENÇÃO: Não está sendo usada neste modelo de 60 perguntas simultâneas,
    pois falar todas as 60 perguntas de uma vez seria inviável.
    Mantida para referência futura ou se o modo de jogo mudar.
    """
    try:
        tts = gTTS(text=texto, lang='pt', slow=False)
        audio_file = "temp_audio.mp3"
        tts.save(audio_file)
        st.audio(audio_file, format='audio/mp3', start_time=0, loop=False)
        time.sleep(max(1.5, len(texto) * 0.08)) # Pequeno atraso para reprodução
        if os.path.exists(audio_file):
            os.remove(audio_file)
    except Exception as e:
        print(f"Erro detalhado ao gerar/reproduzir áudio: {e}")
        st.warning("Não foi possível reproduzir o áudio. Verifique sua conexão com a internet ou as permissões do navegador.")


def gerar_lista_perguntas():
    """Gera uma lista de 60 perguntas de tabuada aleatórias."""
    perguntas = []
    for i in range(TOTAL_PERGUNTAS):
        num1 = random.randint(2, 9)
        num2 = random.randint(1, 10)
        pergunta_texto = f"{num1} x {num2} = ?"
        resposta_correta = num1 * num2
        perguntas.append({'id': i, 'pergunta': pergunta_texto, 'resposta_correta': resposta_correta})
    return perguntas

def inicializar_estado():
    """Inicializa as variáveis de estado da sessão do Streamlit."""
    if 'iniciado' not in st.session_state:
        st.session_state.iniciado = False
    if 'perguntas' not in st.session_state:
        st.session_state.perguntas = []
    if 'respostas_usuario' not in st.session_state:
        st.session_state.respostas_usuario = {} # Dicionário para armazenar respostas por ID
    if 'mostrar_resultados_finais' not in st.session_state:
        st.session_state.mostrar_resultados_finais = False
    if 'acertos' not in st.session_state:
        st.session_state.acertos = 0
    if 'erros' not in st.session_state:
        st.session_state.erros = 0
    # last_key para garantir que os number_inputs sejam re-renderizados e limpos
    if 'last_key' not in st.session_state:
        st.session_state.last_key = time.time()

def iniciar_maratona():
    """Reinicia a maratona de perguntas."""
    st.session_state.iniciado = True
    st.session_state.perguntas = gerar_lista_perguntas()
    st.session_state.respostas_usuario = {p['id']: None for p in st.session_state.perguntas} # Resetas as respostas do usuário
    st.session_state.mostrar_resultados_finais = False
    st.session_state.acertos = 0
    st.session_state.erros = 0
    st.session_state.last_key = time.time() # Reseta a chave para limpar os inputs

def verificar_todas_respostas():
    """Verifica todas as respostas do usuário e calcula o percentual."""
    acertos = 0
    erros = 0
    for pergunta_obj in st.session_state.perguntas:
        pergunta_id = pergunta_obj['id']
        resposta_correta = pergunta_obj['resposta_correta']

        # Pega a resposta do usuário do dicionário, pode ser None se não digitado
        resposta_do_campo = st.session_state.respostas_usuario.get(pergunta_id)

        if resposta_do_campo is None: # Se o campo foi deixado em branco
            erros += 1
        elif int(resposta_do_campo) == resposta_correta:
            acertos += 1
        else:
            erros += 1

    st.session_state.acertos = acertos
    st.session_state.erros = erros
    st.session_state.mostrar_resultados_finais = True # Exibe os resultados
    st.session_state.iniciado = False # Volta para a tela inicial para mostrar os resultados
    st.rerun() # Força a re-execução para mostrar os resultados


# --- Layout do Streamlit ---

st.set_page_config(page_title="Maratona das Tabuadas", layout="wide", initial_sidebar_state="collapsed")

st.title("Maratona das Tabuadas")

inicializar_estado()

if not st.session_state.iniciado:
    st.markdown(
        f"""
        Prepare-se para exercitar suas tabuadas de **2 a 9**!
        Você terá **{TOTAL_PERGUNTAS} perguntas** aleatórias para resolver de uma vez.
        Ao final, poderá verificar seu percentual de acertos.
        """
    )
    if st.button("Iniciar Maratona", key="btn_iniciar_tela_inicial"):
        iniciar_maratona()
        st.rerun() # Força a re-execução para iniciar o quiz

    if st.session_state.mostrar_resultados_finais:
        st.markdown("---")
        st.subheader("Resultados da Última Maratona:")
        st.write(f"Acertos: **{st.session_state.acertos}**")
        st.write(f"Erros: **{st.session_state.erros}**")

        percentual = (st.session_state.acertos / TOTAL_PERGUNTAS) * 100 if TOTAL_PERGUNTAS > 0 else 0
        st.write(f"Percentual de Acertos: **{percentual:.2f}%**")

        col_res1, col_res2 = st.columns(2)
        with col_res1:
            if st.button("Reiniciar Maratona", key="btn_reiniciar_apos_finalizar"):
                iniciar_maratona()
                st.rerun() # Força a recarga para a tela inicial do jogo
        with col_res2:
            st.info("Para finalizar, basta fechar esta aba do navegador.")

    st.markdown("---")
    st.markdown("Autora: **Márcia Romanato**")

else: # Jogo em andamento (mostrando as 60 perguntas)
    st.subheader("Responda todas as perguntas:")

    # Cria as colunas para exibir as perguntas
    cols = st.columns(NUM_COLUMNS)
    perguntas_por_coluna = len(st.session_state.perguntas) // NUM_COLUMNS
    if len(st.session_state.perguntas) % NUM_COLUMNS != 0:
        perguntas_por_coluna += 1 # Garante que todas as perguntas sejam exibidas

    for i, pergunta_obj in enumerate(st.session_state.perguntas):
        col_index = i % NUM_COLUMNS
        with cols[col_index]:
            st.markdown(f"**{pergunta_obj['pergunta']}**")

            # Usamos uma callback no number_input para salvar a resposta diretamente no session_state
            # A chave do number_input deve ser única para cada pergunta
            st.session_state.respostas_usuario[pergunta_obj['id']] = st.number_input(
                "Sua resposta:",
                min_value=0, # Aceita 0 como resposta
                max_value=1000,
                step=1,
                format="%d",
                key=f"resposta_{pergunta_obj['id']}_{st.session_state.last_key}",
                value=st.session_state.respostas_usuario.get(pergunta_obj['id']) # Preenche com a resposta anterior se houver
            )
            st.markdown("---") # Separador para cada pergunta


    st.markdown("---")
    if st.button("Verificar Respostas", key="btn_verificar_respostas"):
        verificar_todas_respostas() # Esta função fará o st.rerun() ao final

    st.markdown("---")
    st.markdown("Autora: **Márcia Romanato**")