# -*- coding: utf-8 -*-
"""app_tabuada8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EZxGT2UIuotxGGQlOdlvYeZ7mAGxi5av
"""

import streamlit as st
import random
from gtts import gTTS
import os
import time
import pandas as pd
import plotly.express as px
import base64 # Importa para lidar com imagem Base64

# --- Configura√ß√µes Iniciais ---
TOTAL_PERGUNTAS = 30
NUM_COLUMNS = 3

# --- Fun√ß√µes Auxiliares ---

def falar(texto):
    """
    Fun√ß√£o para converter texto em voz.
    ATEN√á√ÉO: N√£o est√° sendo usada neste modelo de 30 perguntas simult√¢neas.
    """
    try:
        tts = gTTS(text=texto, lang='pt', slow=False)
        audio_file = "temp_audio.mp3"
        tts.save(audio_file)
        st.audio(audio_file, format='audio/mp3', start_time=0, loop=False)
        time.sleep(max(1.5, len(texto) * 0.08))
        if os.path.exists(audio_file):
            os.remove(audio_file)
    except Exception as e:
        print(f"Erro detalhado ao gerar/reproduzir √°udio: {e}")
        st.warning("N√£o foi poss√≠vel reproduzir o √°udio. Verifique sua conex√£o com a internet ou as permiss√µes do navegador.")


def gerar_lista_perguntas():
    """Gera uma lista de 30 perguntas de tabuada aleat√≥rias e √∫nicas."""
    perguntas = []
    perguntas_unicas = set()

    while len(perguntas) < TOTAL_PERGUNTAS:
        num1 = random.randint(2, 9)
        num2 = random.randint(1, 10)

        pergunta_par = (num1, num2)

        if pergunta_par not in perguntas_unicas:
            perguntas_unicas.add(pergunta_par)
            pergunta_texto = f"{num1} x {num2} = ?"
            resposta_correta = num1 * num2
            perguntas.append({'id': len(perguntas), 'pergunta': pergunta_texto, 'resposta_correta': resposta_correta})
    return perguntas

def inicializar_estado():
    """Inicializa as vari√°veis de estado da sess√£o do Streamlit."""
    if 'iniciado' not in st.session_state:
        st.session_state.iniciado = False
    if 'perguntas' not in st.session_state:
        st.session_state.perguntas = []
    if 'respostas_usuario' not in st.session_state:
        st.session_state.respostas_usuario = {}
    if 'mostrar_resultados_finais' not in st.session_state:
        st.session_state.mostrar_resultados_finais = False
    if 'acertos' not in st.session_state:
        st.session_state.acertos = 0
    if 'erros' not in st.session_state:
        st.session_state.erros = 0
    if 'last_key' not in st.session_state:
        st.session_state.last_key = time.time()

def iniciar_maratona():
    """Reinicia a maratona de perguntas."""
    st.session_state.iniciado = True
    st.session_state.perguntas = gerar_lista_perguntas()
    st.session_state.respostas_usuario = {p['id']: None for p in st.session_state.perguntas}
    st.session_state.mostrar_resultados_finais = False
    st.session_state.acertos = 0
    st.session_state.erros = 0
    st.session_state.last_key = time.time()
    st.rerun()

def verificar_todas_respostas():
    """Verifica todas as respostas do usu√°rio e calcula o percentual."""
    acertos = 0
    erros = 0
    for pergunta_obj in st.session_state.perguntas:
        pergunta_id = pergunta_obj['id']
        resposta_correta = pergunta_obj['resposta_correta']

        input_widget_key = f"resposta_input_{pergunta_id}_{st.session_state.last_key}"
        resposta_do_campo_str = st.session_state.get(input_widget_key, '')

        if not resposta_do_campo_str or not resposta_do_campo_str.strip():
            erros += 1
            continue

        try:
            resposta_digitada = int(resposta_do_campo_str)
        except ValueError:
            erros += 1
            continue

        if resposta_digitada == resposta_correta:
            acertos += 1
        else:
            erros += 1

    st.session_state.acertos = acertos
    st.session_state.erros = erros
    st.session_state.mostrar_resultados_finais = True
    st.session_state.iniciado = False
    st.rerun()


# --- Estilo CSS Personalizado (para imagem de fundo) ---
# Voc√™ pode usar uma URL para a imagem ou codific√°-la em Base64
# Exemplo de URL (substitua pela sua imagem!):
# BACKGROUND_IMAGE_URL = "https://images.unsplash.com/photo-1555005877-c93d8b1e4a0d" # Exemplo de fundo abstrato
# BACKGROUND_IMAGE_URL = "https://i.imgur.com/your_image_here.png" # Exemplo para uma imagem hospedada no Imgur

# Se voc√™ quiser usar uma imagem local no seu projeto:
# 1. Coloque a imagem na mesma pasta do seu script (ou em uma subpasta). Ex: "fundo_divertido.png"
# 2. Use a fun√ß√£o get_base64_of_bin_file abaixo.
# Substitua 'your_image.png' pelo nome do seu arquivo de imagem local.
# Exemplo com imagem local (comente a linha BACKGROUND_IMAGE_URL se usar esta):
# def get_base64_of_bin_file(bin_file):
#     with open(bin_file, 'rb') as f:
#         data = f.read()
#     return base64.b64encode(data).decode()
# img_base64 = get_base64_of_bin_file('fundo_divertido.png') # Nome do seu arquivo de imagem
# page_bg_img = f'''
# <style>
# [data-testid="stAppViewContainer"] > .main {{
# background-image: url("data:image/png;base64,{img_base64}");
# background-size: cover;
# background-position: center;
# background-repeat: no-repeat;
# background-attachment: fixed; # Para fixar o fundo enquanto rola
# }}
# </style>
# '''

# Usando uma URL (mais simples para testes iniciais)
BACKGROUND_IMAGE_URL = "https://www.publicdomainpictures.net/pictures/320000/velka/chalkboard-with-math-formulas.jpg" # Exemplo de fundo de lousa
# Voc√™ pode procurar por imagens em sites como Unsplash, Pixabay ou Pexels e usar a URL direta da imagem.

page_bg_img = f'''
<style>
[data-testid="stAppViewContainer"] > .main {{
background-image: url("{BACKGROUND_IMAGE_URL}");
background-size: cover;
background-position: center;
background-repeat: no-repeat;
background-attachment: fixed;
}}
</style>
'''
st.markdown(page_bg_img, unsafe_allow_html=True)

# --- Layout do Streamlit ---

st.set_page_config(page_title="Maratona das Tabuadas", layout="wide", initial_sidebar_state="collapsed", page_icon="‚úñÔ∏è")

# T√≠tulo principal com cores vibrantes
st.markdown("<h1 style='text-align: center; color: #FF69B4;'>Maratona das Tabuadas</h1>", unsafe_allow_html=True)
st.markdown("<h2 style='text-align: center; color: #4CAF50;'>Desafie-se e domine a multiplica√ß√£o!</h2>", unsafe_allow_html=True)

inicializar_estado()

if not st.session_state.iniciado:
    st.markdown(
        f"""
        <p style='font-size: 18px; color: #3366FF;'>
        Prepare-se para exercitar suas tabuadas de <b>2 a 9</b>!
        Voc√™ ter√° <b><span style='color: #FF4500;'>{TOTAL_PERGUNTAS}</span> perguntas</b> aleat√≥rias e √∫nicas para resolver de uma vez.
        Ao final, poder√° verificar seu percentual de acertos.
        </p>
        """, unsafe_allow_html=True
    )

    st.write("")
    if st.button("üöÄ Iniciar Maratona Agora!", key="btn_iniciar_tela_inicial", help="Come√ßar o desafio de tabuadas"):
        iniciar_maratona()

    if st.session_state.mostrar_resultados_finais:
        st.divider()
        st.markdown("<h2 style='text-align: center; color: #FFD700;'>üéâ Resultados da √öltima Maratona üéâ</h2>", unsafe_allow_html=True)
        st.markdown(f"<p style='font-size: 18px;'>Acertos: <span style='color: #28A745; font-weight: bold;'>{st.session_state.acertos}</span></p>", unsafe_allow_html=True)
        st.markdown(f"<p style='font-size: 18px;'>Erros: <span style='color: #DC3545; font-weight: bold;'>{st.session_state.erros}</span></p>", unsafe_allow_html=True)

        percentual = (st.session_state.acertos / TOTAL_PERGUNTAS) * 100 if TOTAL_PERGUNTAS > 0 else 0
        st.markdown(f"<p style='font-size: 18px;'>Percentual de Acertos: <span style='color: #6F42C1; font-weight: bold;'>{percentual:.2f}%</span></p>", unsafe_allow_html=True)

        data = {'Categoria': ['Acertos', 'Erros'],
                'Quantidade': [st.session_state.acertos, st.session_state.erros]}
        df = pd.DataFrame(data)

        fig = px.pie(df, values='Quantidade', names='Categoria',
                     title='Desempenho Geral',
                     color_discrete_sequence=['#4CAF50', '#F44336'])
        fig.update_traces(textposition='inside', textinfo='percent+label')
        st.plotly_chart(fig, use_container_width=True)

        col_res1, col_res2 = st.columns(2)
        with col_res1:
            if st.button("üîÑ Reiniciar Maratona", key="btn_reiniciar_apos_finalizar", help="Come√ßar um novo desafio"):
                iniciar_maratona()
        with col_res2:
            st.info("Para finalizar o aplicativo, basta fechar esta aba do navegador.")

    st.divider()
    st.markdown("<p style='text-align: center; font-size: 14px; color: #800080;'>Autora: <b>M√°rcia Romanato</b></p>", unsafe_allow_html=True)

else:
    st.markdown("<h3 style='color: #008080;'>Responda todas as perguntas abaixo:</h3>", unsafe_allow_html=True)
    st.markdown("<p style='font-size: 16px; color: #B22222;'><b>Aten√ß√£o:</b> N√£o deixe campos em branco e digite apenas n√∫meros. Digitar algo diferente ser√° contado como erro.</p>", unsafe_allow_html=True)

    st.divider()

    cols = st.columns(NUM_COLUMNS)

    for i, pergunta_obj in enumerate(st.session_state.perguntas):
        col_index = i % NUM_COLUMNS
        with cols[col_index]:
            st.markdown(f"<p style='font-size: 20px; font-weight: bold; color: #5F9EA0;'>{pergunta_obj['pergunta']}</p>", unsafe_allow_html=True)

            input_widget_key = f"resposta_input_{pergunta_obj['id']}_{st.session_state.last_key}"

            initial_value = st.session_state.get(input_widget_key, '')
            if initial_value is None:
                initial_value = ''

            st.text_input(
                "Sua resposta:",
                key=input_widget_key,
                value=initial_value,
                max_chars=3
            )
            st.markdown("---")

    st.markdown("---")
    st.write("")
    if st.button("‚úÖ Verificar Minhas Respostas", key="btn_verificar_respostas", help="Enviar todas as respostas para corre√ß√£o"):
        verificar_todas_respostas()

    st.divider()
    st.markdown("<p style='text-align: center; font-size: 14px; color: #800080;'>Autora: <b>M√°rcia Romanato</b></p>", unsafe_allow_html=True)