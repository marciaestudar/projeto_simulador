# -*- coding: utf-8 -*-
"""app_tabuada21.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vaCXbS8X8Em7BQQ8_cLUXYr4GoVvG2LP
"""

import streamlit as st
import random
from gtts import gTTS
import os
import time
import pandas as pd
import plotly.express as px

# --- Configura√ß√µes Iniciais ---
TOTAL_PERGUNTAS = 21
NUM_COLUMNS = 3

# 1. O PRIMEIRO COMANDO STREAMLIT DEVE SER SEMPRE st.set_page_config()
st.set_page_config(
    page_title="Maratona das Tabuadas Divertida!",
    layout="wide",
    initial_sidebar_state="collapsed",
    page_icon="‚ú®",
)


# --- Fun√ß√µes Auxiliares ---
def falar(texto):
    """
    Fun√ß√£o para converter texto em voz.
    ATEN√á√ÉO: N√£o est√° sendo usada neste modelo de 30 perguntas simult√¢neas.
    """
    try:
        tts = gTTS(text=texto, lang="pt", slow=False)
        audio_file = "temp_audio.mp3"
        tts.save(audio_file)
        st.audio(audio_file, format="audio/mp3", start_time=0, loop=False)
        time.sleep(max(1.5, len(texto) * 0.08))
        if os.path.exists(audio_file):
            os.remove(audio_file)
    except Exception as e:
        print(f"Erro detalhado ao gerar/reproduzir √°udio: {e}")
        st.warning(
            "N√£o foi poss√≠vel reproduzir o √°udio. Verifique sua conex√£o com a internet ou as permiss√µes do navegador."
        )


def gerar_lista_perguntas():
    """Gera uma lista de 21 perguntas de tabuada aleat√≥rias e √∫nicas."""
    perguntas = []
    perguntas_unicas = set()

    while len(perguntas) < TOTAL_PERGUNTAS:
        num1 = random.randint(2, 9)
        num2 = random.randint(1, 10)

        pergunta_par = (num1, num2)

        if pergunta_par not in perguntas_unicas:
            perguntas_unicas.add(pergunta_par)
            pergunta_texto = f"{num1} x {num2} = ?"
            resposta_correta = num1 * num2
            perguntas.append(
                {"id": len(perguntas), "pergunta": pergunta_texto, "resposta_correta": resposta_correta}
            )
    return perguntas


def inicializar_estado():
    """Inicializa as vari√°veis de estado da sess√£o do Streamlit."""
    if "iniciado" not in st.session_state:
        st.session_state.iniciado = False
    if "perguntas" not in st.session_state:
        st.session_state.perguntas = []
    if "respostas_usuario" not in st.session_state:
        st.session_state.respostas_usuario = {}
    if "mostrar_resultados_finais" not in st.session_state:
        st.session_state.mostrar_resultados_finais = False
    if "acertos" not in st.session_state:
        st.session_state.acertos = 0
    if "erros" not in st.session_state:
        st.session_state.erros = 0
    if "last_key" not in st.session_state:
        st.session_state.last_key = time.time()


def iniciar_maratona():
    """Reinicia a maratona de perguntas."""
    st.session_state.iniciado = True
    st.session_state.perguntas = gerar_lista_perguntas()
    st.session_state.respostas_usuario = {p["id"]: None for p in st.session_state.perguntas}
    st.session_state.mostrar_resultados_finais = False  # Esconde os resultados finais
    st.session_state.acertos = 0
    st.session_state.erros = 0
    st.session_state.last_key = time.time()  # Garante novas chaves para os inputs
    st.rerun()  # For√ßa o Streamlit a reexecutar o script desde o in√≠cio


def verificar_todas_respostas():
    """Verifica todas as respostas do usu√°rio e calcula o percentual."""
    acertos = 0
    erros = 0
    for pergunta_obj in st.session_state.perguntas:
        pergunta_id = pergunta_obj["id"]
        resposta_correta = pergunta_obj["resposta_correta"]

        input_widget_key = f"resposta_input_{pergunta_id}_{st.session_state.last_key}"
        resposta_do_campo_str = st.session_state.get(input_widget_key, "")

        if not resposta_do_campo_str or not resposta_do_campo_str.strip():
            erros += 1
            continue

        try:
            resposta_digitada = int(resposta_do_campo_str)
        except ValueError:
            erros += 1
            continue

        if resposta_digitada == resposta_correta:
            acertos += 1
        else:
            erros += 1

    st.session_state.acertos = acertos
    st.session_state.erros = erros
    st.session_state.mostrar_resultados_finais = True
    st.session_state.iniciado = False  # Volta para a tela inicial/resultados
    st.rerun()


# --- Fun√ß√µes de Mensagens Motivacionais ---
def exibir_mensagem_motivacional(percentual):
    st.write("")  # Espa√ßamento
    if percentual == 100:
        st.balloons()  # Efeito de bal√µes!
        st.markdown(
            "<h3 style='text-align: center; color: #28A745;'>üéâ Uau! Que demais! 100% de acerto! Voc√™ √© um g√™nio da tabuada! Parab√©ns! üéâ</h3>",
            unsafe_allow_html=True,
        )
    elif percentual >= 80:
        st.success("üåü Incr√≠vel! Voc√™ est√° mandando muito bem nas tabuadas! Continue assim!")
    elif percentual >= 50:
        st.info("üëç Muito bom! Voc√™ j√° acertou bastante. Um pouco mais de pr√°tica e voc√™ chega l√°!")
    else:
        st.warning(
            "üí™ N√£o desanime! Cada erro √© uma chance de aprender. Continue praticando, voc√™ vai conseguir!"
        )
    st.write("")  # Espa√ßamento


# --- Estilo CSS Personalizado (para imagem de fundo) ---

# URL RAW da imagem do GitHub
BACKGROUND_IMAGE_RAW_URL = "https://github.com/marciaestudar/projeto_simulador/blob/main/imagem_criancas3.jpeg"

page_bg_img_css = f"""
        <style>
        /* Estilo para o container principal do Streamlit */
        [data-testid="stAppViewContainer"] {{
            background-image: url("{BACKGROUND_IMAGE_RAW_URL}") !important;
            background-size: cover !important;
            background-position: center !important;
            background-repeat: no-repeat !important;
            background-attachment: fixed !important;
        }}

        /* Garantir que o container principal do conte√∫do seja transparente */
        [data-testid="stAppViewContainer"] > .main {{
            background-color: rgba(255, 255, 255, 0) !important; /* Totalmente transparente */
        }}

        /* Garantir que o bloco de conte√∫do principal tamb√©m seja transparente */
        [data-testid="stVerticalBlock"] {{
            background-color: rgba(255, 255, 255, 0) !important; /* Totalmente transparente */
        }}

        /* Estilos para o texto: cor, negrito, sem sombra */
        /* Geral para todos os textos, exceto os t√≠tulos principais que t√™m suas cores espec√≠ficas */
        h3, p, span, div, .stTextInput > div > div > input {{
            color: #080404 !important; /* Preto */
            font-weight: bold !important; /* Texto em negrito */
        }}

        /* Ajustar cor do texto para t√≠tulos principais sem sombra, mantendo negrito */
        h1 {{
            color: #2BA30A !important; /* Verde */
            font-weight: bold !important;
        }}
        /* Ajustar cor do texto do h2 (especificamente o "Vamos aprender e brincar muito!") para azul negrito */
        h2 {{
            color: #0000FF !important; /* Azul puro */
            font-weight: bold !important;
        }}

        /* Ajuste de cor do input de texto para contraste */
        .stTextInput > div > div > input {{
            background-color: rgba(255, 255, 255, 0.85) !important; /* Fundo semi-transparente para o input */
            color: #9E0303 !important; /* Cor do texto no input (vermelho escuro) */
            border-radius: 5px !important; /* Bordas arredondadas para o input */
            padding: 8px 12px !important; /* Espa√ßamento interno */
        }}

        /* Ajustar cor de fundo do st-emotion-cache para inputs e bot√µes */
        /* Isso tenta for√ßar o fundo branco mesmo com tema escuro do Streamlit */
        div[data-testid="stTextInput"], div[data-testid="stButton"] {{
            background-color: white !important; /* Fundo branco para os elementos */
            border-radius: 8px !important; /* Manter bordas arredondadas */
        }}

        /* --- ESTILO PARA O BOT√ÉO "VERIFICAR MINHAS RESPOSTAS" (Verde) --- */
        /* Removido o aria-label do seletor para evitar mostrar como tooltip */
        /* Alterado para o seletor pelo texto vis√≠vel para mais robustez com Streamlit */
        [data-testid="stButton"] > button {{
            background-color: #4CAF50; /* Um verde legal para o bot√£o de verificar */
            color: white; /* Texto branco */
            border-radius: 8px; /* Bordas mais arredondadas */
            padding: 10px 20px; /* Mais espa√ßamento interno */
            font-size: 18px; /* Tamanho do texto do bot√£o */
            font-weight: bold; /* Negrito */
            border: none; /* Remover borda padr√£o */
            box-shadow: 2px 2px 5px rgba(0,0,0,0.3); /* Sombra para dar profundidade */
            transition: all 0.2s ease-in-out; /* Transi√ß√£o suave para hover */
        }}

        /* Estilo para quando o mouse passa por cima do bot√£o Verificar */
        [data-testid="stButton"] > button:hover {{
            background-color: #45a049; /* Um tom de verde um pouco mais escuro no hover */
            transform: translateY(-2px); /* Pequeno movimento para cima */
            box-shadow: 4px 4px 10px rgba(0,0,0,0.4); /* Sombra maior no hover */
        }}

        /* --- ESTILO PARA OS BOT√ïES "INICIAR MARATONA", "REINICIAR MARATONA" e "FINAL" (Branco com Texto Azul) --- */
        /* Especificando o aria-label para pegar APENAS esses bot√µes */
        [data-testid="stButton"] > button[aria-label="Come√ßar o desafio de tabuadas"],
        [data-testid="stButton"] > button[aria-label="Come√ßar um novo desafio"],
        [data-testid="stButton"] > button[aria-label="Finalizar o aplicativo"] {{ /* Novo seletor para o bot√£o Final */
            background-color: white; /* Cor de fundo branca para o bot√£o */
            color: #008CBA; /* Cor do texto (azul ciano escuro) */
            border-radius: 8px;
            padding: 10px 20px;
            font-size: 18px;
            font-weight: bold;
            border: 1px solid #008CBA; /* Uma borda sutil para destacar do fundo */
            box-shadow: 2px 2px 5px rgba(0,0,0,0.3);
            transition: all 0.2s ease-in-out;
        }}

        /* Estilo para quando o mouse passa por cima dos bot√µes Iniciar/Reiniciar/Final */
        [data-testid="stButton"] > button[aria-label="Come√ßar o desafio de tabuadas"]:hover,
        [data-testid="stButton"] > button[aria-label="Come√ßar um novo desafio"]:hover,
        [data-testid="stButton"] > button[aria-label="Finalizar o aplicativo"]:hover {{
            background-color: #f0f0f0; /* Um branco levemente mais escuro no hover */
            transform: translateY(-2px);
            box-shadow: 4px 4px 10px rgba(0,0,0,0.4);
        }}


        </style>
        """
st.markdown(page_bg_img_css, unsafe_allow_html=True)


# --- Layout do Streamlit ---

# T√≠tulo principal com cores vibrantes
st.markdown(
    "<h1 style='text-align: center;'> üåü Maratona das Tabuadas Divertida! üåü</h1>", unsafe_allow_html=True
)
# Frase "Vamos aprender e brincar muito!" em azul negrito
st.markdown(
    "<h2 style='text-align: center; color: #0000FF;'>Vamos aprender e brincar muito!</h2>",
    unsafe_allow_html=True,
)

inicializar_estado()

if not st.session_state.iniciado:
    # Frases uma embaixo da outra, com cores e tamanho ajustados
    st.markdown(
        "<p style='font-size: 20px;'><b>Prepare-se para exercitar suas tabuadas de 2 a 9!</b></p>",
        unsafe_allow_html=True,
    )
    st.markdown(
        f"<p style='font-size: 20px;'><b>Voc√™ ter√° {TOTAL_PERGUNTAS} perguntas aleat√≥rias e √∫nicas para resolver de uma vez.</b></p>",
        unsafe_allow_html=True,
    )
    st.markdown(
        "<p style='font-size: 20px;'><b>Ao final, poder√° verificar seu percentual de acertos.</b></p>",
        unsafe_allow_html=True,
    )

    st.write("")
    # Removido o help do bot√£o para evitar a segunda frase (ou mantido para tooltip)
    if st.button(
        "üöÄ Iniciar Maratona Agora!", key="btn_iniciar_tela_inicial", help="Come√ßar o desafio de tabuadas"
    ):
        iniciar_maratona()

    if st.session_state.mostrar_resultados_finais:
        st.divider()
        st.markdown(
            "<h2 style='text-align: center; color: #FFD700;'>üéâ Resultados da √öltima Maratona üéâ</h2>",
            unsafe_allow_html=True,
        )
        st.markdown(
            f"<p style='font-size: 20px;'>Acertos: <b>{st.session_state.acertos}</b></p>",
            unsafe_allow_html=True,
        )
        st.markdown(
            f"<p style='font-size: 20px;'>Erros: <b>{st.session_state.erros}</b></p>", unsafe_allow_html=True
        )

        percentual = (
            (st.session_state.acertos / TOTAL_PERGUNTAS) * 100 if TOTAL_PERGUNTAS > 0 else 0
        )
        st.markdown(
            f"<p style='font-size: 20px;'>Percentual de Acertos: <b>{percentual:.2f}%</b></p>",
            unsafe_allow_html=True,
        )

        data = {"Categoria": ["Acertos", "Erros"], "Quantidade": [st.session_state.acertos, st.session_state.erros]}
        df = pd.DataFrame(data)

        fig = px.pie(
            df,
            values="Quantidade",
            names="Categoria",
            title="Desempenho Geral",
            color_discrete_sequence=["#4CAF50", "#F44336"],
        )
        fig.update_traces(textposition="inside", textinfo="percent+label")
        st.plotly_chart(fig, use_container_width=True)

        # --- CHAMADA PARA MENSAGENS MOTIVACIONAIS ---
        exibir_mensagem_motivacional(percentual)

        col_res1, col_res2 = st.columns(2)
        with col_res1:
            if st.button(
                "üîÑ Reiniciar Maratona",
                key="btn_reiniciar_apos_finalizar",
                help="Come√ßar um novo desafio",
            ):
                iniciar_maratona()
        with col_res2:
            # Bot√£o "Finalizar o aplicativo" com o mesmo estilo dos bot√µes iniciar/reiniciar
            if st.button(
                "üî¥ Finalizar o Aplicativo", key="btn_finalizar", help="Finalizar o aplicativo"
            ):
                # Simula um refresh para "desligar" o app, ou apenas n√£o faz nada para parar a execu√ß√£o
                st.write("Aplicativo finalizado. Voc√™ pode fechar esta aba.")
                st.stop()

        st.divider()
        # Texto da autoria na tela inicial, corrigido para "Cria√ß√£o" e tamanho
        st.markdown(
            "<p style='text-align: center; font-size: 20px;'><b>Cria√ß√£o: M√°rcia Romanato</b></p>",
            unsafe_allow_html=True,
        )

else:  # Jogo em andamento (perguntas)
    # Cor do h3 "Responda todas as perguntas abaixo"
    st.markdown(
        "<h3 style='color: #F20A1D;'>Responda todas as perguntas abaixo:</h3>", unsafe_allow_html=True
    )
    # Frase "Aten√ß√£o..." em vermelho negrito
    st.markdown(
        "<p style='font-size: 20px; color: red;'><b>Aten√ß√£o:</b> N√£o deixe campos em branco e digite apenas n√∫meros. Digitar algo diferente ser√° contado como erro.</p>",
        unsafe_allow_html=True,
    )

    st.divider()

    cols = st.columns(NUM_COLUMNS)

    for i, pergunta_obj in enumerate(st.session_state.perguntas):
        col_index = i % NUM_COLUMNS
        with cols[col_index]:
            # Tamanho da fonte das perguntas
            st.markdown(
                f"<p style='font-size: 20px;'><b>{pergunta_obj['pergunta']}</b></p>",
                unsafe_allow_html=True,
            )

            input_widget_key = f"resposta_input_{pergunta_obj['id']}_{st.session_state.last_key}"

            initial_value = st.session_state.get(input_widget_key, "")
            if initial_value is None:
                initial_value = ""

            st.text_input(
                "Sua resposta:",
                key=input_widget_key,
                value=initial_value,
                max_chars=3,
            )
            st.markdown("---")

    st.markdown("---")
    st.write("")
    # Removido o help do bot√£o para evitar a segunda frase (ou mantido para tooltip)
    if st.button(
        "‚úÖ Verificar Minhas Respostas",
        key="btn_verificar_respostas",
        help="Enviar todas as respostas para corre√ß√£o",
    ):
        verificar_todas_respostas()

    st.divider()
    # Texto da autoria na tela de perguntas, corrigido para "Cria√ß√£o" e tamanho
    st.markdown(
        "<p style='text-align: center; font-size: 20px;'><b>Cria√ß√£o: M√°rcia Romanato</b></p>",
        unsafe_allow_html=True,
    )